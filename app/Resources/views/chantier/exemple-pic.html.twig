{# app/Resources/views/chantier/exemple-pic.html.twig #}

{% extends 'demo.html.twig' %}

{% block stylesheets %}
            <link rel="stylesheet" href="{{ asset('libs/leaflet/leaflet.css') }}" />
            <link rel="stylesheet" href="{{ asset('libs/leaflet.draw/leaflet.draw.css') }}" />
            <link rel="stylesheet" href="{{ asset('libs/leaflet.styleEditor/css/Leaflet.StyleEditor.min.css') }}" />
{% endblock %}

{% block headerscripts %}
            <script src="{{ asset('libs/leaflet/leaflet.js') }}"></script>

            <script src="{{ asset('libs/leaflet.draw/leaflet.draw.js') }}"></script>
            <script src="{{ asset('libs/leaflet.draw/Leaflet.Draw.Event.js') }}"></script>

            <script src="{{ asset('libs/leaflet.draw/Toolbar.js') }}"></script>
            <script src="{{ asset('libs/leaflet.draw/Tooltip.js') }}"></script>
            <script src="{{ asset('libs/leaflet.draw/Control.Draw.js') }}"></script>

            <script src="{{ asset('libs/leaflet.draw/ext/GeometryUtil.js') }}"></script>
            <script src="{{ asset('libs/leaflet.draw/ext/LatLngUtil.js') }}"></script>
            <script src="{{ asset('libs/leaflet.draw/ext/LineUtil.Intersect.js') }}"></script>
            <script src="{{ asset('libs/leaflet.draw/ext/Polygon.Intersect.js') }}"></script>
            <script src="{{ asset('libs/leaflet.draw/ext/Polyline.Intersect.js') }}"></script>
            <script src="{{ asset('libs/leaflet.draw/ext/TouchEvents.js') }}"></script>

            <script src="{{ asset('libs/leaflet.draw/draw/DrawToolbar.js') }}"></script>
            <script src="{{ asset('libs/leaflet.draw/draw/handler/Draw.Feature.js') }}"></script>
            <script src="{{ asset('libs/leaflet.draw/draw/handler/Draw.SimpleShape.js') }}"></script>
            <script src="{{ asset('libs/leaflet.draw/draw/handler/Draw.Polyline.js') }}"></script>
            <script src="{{ asset('libs/leaflet.draw/draw/handler/Draw.Marker.js') }}"></script>
            <script src="{{ asset('libs/leaflet.draw/draw/handler/Draw.CircleMarker.js') }}"></script>
            <script src="{{ asset('libs/leaflet.draw/draw/handler/Draw.Circle.js') }}"></script>
            <script src="{{ asset('libs/leaflet.draw/draw/handler/Draw.Polygon.js') }}"></script>
            <script src="{{ asset('libs/leaflet.draw/draw/handler/Draw.Rectangle.js') }}"></script>

            <script src="{{ asset('libs/leaflet.draw/edit/EditToolbar.js') }}"></script>
            <script src="{{ asset('libs/leaflet.draw/edit/handler/EditToolbar.Edit.js') }}"></script>
            <script src="{{ asset('libs/leaflet.draw/edit/handler/EditToolbar.Delete.js') }}"></script>

            <script src="{{ asset('libs/leaflet.draw/edit/handler/Edit.Poly.js') }}"></script>
            <script src="{{ asset('libs/leaflet.draw/edit/handler/Edit.SimpleShape.js') }}"></script>
            <script src="{{ asset('libs/leaflet.draw/edit/handler/Edit.Marker.js') }}"></script>
            <script src="{{ asset('libs/leaflet.draw/edit/handler/Edit.CircleMarker.js') }}"></script>
            <script src="{{ asset('libs/leaflet.draw/edit/handler/Edit.Circle.js') }}"></script>
            <script src="{{ asset('libs/leaflet.draw/edit/handler/Edit.Rectangle.js') }}"></script>

            <script src="{{ asset('libs/leaflet.styleEditor/js/Leaflet.StyleEditor.min.js') }}"></script>

{% endblock %}


{% block body %}
            <div class="one whole container centered">
                <div class="two thirds padded">
                    <div class="noicon" id="map" style="height:600px;"></div>
                    <script>
                        var mapboxUrl = 'https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token={{ mapbox_token }}';
                        var mapboxAttribution = 'Map data <a href="http://openstreetmap.org">OpenStreetMap</a> contributors, <a href="http://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery © <a href="http://mapbox.com">Mapbox</a>';
                        
                        var outdoor = L.tileLayer(mapboxUrl, {id: 'mapbox.outdoors', accessToken: '{{ mapbox_token }}', attribution: mapboxAttribution, maxZoom: 19}),
                            grayscale = L.tileLayer(mapboxUrl, {id: 'mapbox.light', accessToken: '{{ mapbox_token }}', attribution: mapboxAttribution, maxZoom: 19}),
                            satellite = L.tileLayer(mapboxUrl, {id: 'mapbox.satellite', accessToken: '{{ mapbox_token }}', attribution: mapboxAttribution, maxZoom: 19}),
                            streets   = L.tileLayer(mapboxUrl, {id: 'mapbox.streets', accessToken: '{{ mapbox_token }}', attribution: mapboxAttribution, maxZoom: 19});

                        var baseMaps = {
                            "courbes de niveau": outdoor,
                            "plan": streets,
                            "échelle de gris": grayscale,
                            "vue satellite": satellite
                        };

                        // dimensions of the image
                        var bounds1 = new L.LatLngBounds([48.702966, 1.36736], [48.712021, 1.380027]),
                            bounds2 = new L.LatLngBounds([48.707221, 1.371706], [48.709628, 1.376914]);

                        // add the image overlay, so that it covers the entire map
                        var plansituation = L.imageOverlay("{{ asset('ressources/vernouillet.png') }}", bounds1),
                            planmasse = L.imageOverlay("{{ asset('ressources/plan-de-masse.png') }}", bounds2);

                        // calque d'édition du PIC
                        geojsonFeature = {"type":"FeatureCollection","features":[{"type":"Feature","properties":{"options":{"stroke":true,"color":"#fe57a1","weight":4,"opacity":0.5,"fill":true,"fillColor":"#fe57a1","fillOpacity":0.1,"clickable":true,"original":{"stroke":true,"color":"#fe57a1","weight":4,"opacity":0.5,"fill":true,"fillColor":null,"fillOpacity":0.2,"clickable":true,"smoothFactor":1,"noClip":false,"lineCap":"round","lineJoin":"round","dashArray":null,"dashOffset":null,"fillRule":"evenodd","interactive":true,"bubblingMouseEvents":true,"pane":"overlayPane","attribution":null},"editing":{"dashArray":"5, 5","fill":true,"fillColor":"#fe57a1","fillOpacity":0.1,"maintainColor":false},"dashArray":"10, 10","maintainColor":false}},"geometry":{"type":"Polygon","coordinates":[[[1.372911,48.707321],[1.372353,48.708709],[1.37519,48.709109],[1.375168,48.709463],[1.37592,48.709583],[1.376045,48.709247],[1.376478,48.707976],[1.372911,48.707321]]]}},{"type":"Feature","properties":{"options":{"stroke":true,"color":"rgb(192, 57, 43)","weight":4,"opacity":"0.7","fill":true,"fillColor":"#fe57a1","fillOpacity":0.1,"clickable":true,"original":{"stroke":true,"color":"rgb(192, 57, 43)","weight":4,"opacity":"0.7","fill":true,"fillColor":"rgb(192, 57, 43)","fillOpacity":"0.5","clickable":true,"smoothFactor":1,"noClip":false,"lineCap":"round","lineJoin":"round","dashArray":null,"dashOffset":null,"fillRule":"evenodd","interactive":true,"bubblingMouseEvents":true,"pane":"overlayPane","attribution":null},"editing":{"dashArray":"10, 10","fill":true,"fillColor":"#fe57a1","fillOpacity":0.1,"maintainColor":false},"dashArray":"10, 10","maintainColor":false}},"geometry":{"type":"Polygon","coordinates":[[[1.373964,48.708612],[1.374404,48.708672],[1.374415,48.708609],[1.374689,48.708648],[1.374753,48.708471],[1.375016,48.708513],[1.374995,48.70858],[1.375547,48.708655],[1.375649,48.708315],[1.375934,48.708354],[1.375993,48.708187],[1.375021,48.708039],[1.375,48.708102],[1.374774,48.708074],[1.374801,48.70801],[1.37471,48.707989],[1.374678,48.708046],[1.374589,48.708042],[1.374603,48.707986],[1.374184,48.707933],[1.373964,48.708612]]]}}]};                        
                        
                        var planinstallation = L.geoJSON(geojsonFeature); // L.featureGroup();        

                        var overlayMaps = {
                            "Plan de Situation": plansituation,
                            "Plan de Masse": planmasse,
                            "Plan d'Installation Chantier": planinstallation 
                        };

                        var map = L.map('map', {center: [48.709111, 1.375194], zoom: 15, layers: [outdoor, plansituation, planinstallation]});
                        
                        L.control.layers(baseMaps, overlayMaps).addTo(map);

                        var drawControl = new L.Control.Draw({
                            edit: {
                                featureGroup: planinstallation,
                                polygon: {
                                    allowIntersection: false,
                                    showArea: true
                                }                            },
                            draw: {
                                featureGroup: planinstallation,
                                rectangle: false,
                                circlemarker: false,
                                circle: true,
                                marker: false,
                                polyline: {
                                    metric: true
                                },
                                polygon: {
                                    allowIntersection: false,
                                    showArea: true
                                }
                            }
                        });
                        map.addControl(drawControl);

                        var styleEditor = new L.control.styleEditor({
                            position: 'topleft',
                            openOnLeafletDraw: false,
                            useGrouping: false
                        });
                        map.addControl(styleEditor);

                        map.on('draw:created', function(e) {
                            var layer = e.layer,
                                type = e.layerType,
                                feature = layer.feature = layer.feature || {}, // Intialize layer.feature
                                options = layer.options; 

                            feature.type = feature.type || "Feature"; // Intialize feature.type
                            feature.properties = feature.properties || {}; // Intialize feature.properties

                            feature.properties["options"] = options;
                            if (type === "circle") {
                                var radius = layer.getRadius();
                                feature.properties["radius"] = radius;
                                layer.bindTooltip('portée ' + Math.round(radius,1)+ ' m',   {direction:"center"}).openTooltip();    
                            }
                            
                            planinstallation.addLayer(layer);

                            data = planinstallation.toGeoJSON();
                            console.log ('AJOUT :');
                            console.log(JSON.stringify(data));
                        });

                        map.on('draw:edited', function(e) {
                            var layers = e.layers;
                            layers.eachLayer(function (layer) {
                         
                                //do whatever you want; most likely save back to db
                            
                            });

                            data = planinstallation.toGeoJSON();
                            console.log ('MODIFICATION :');
                            console.log(JSON.stringify(data));
                        });                      

                    </script>
                </div>
                <div class="one third padded">
                    <h3>Plan d'installation du chantier (PIC)</h3>
                </div>
            </div>
{% endblock  %}
